<?php

// $Id$ 

/**
 * Taxonomy Manager
 */



/**
 * Implementation of hook_menu
 */
function taxonomy_manager_menu($may_cache) {
  $items = array();
  
  if ($may_cache) {
    $items[] = array('path' => 'admin/content/taxonomy_manager',
      'title' => t('Taxonomy Manager'),
      'description' => t('Administer vocabularies with the Taxonomy Manager'),
      'callback' => 'taxonomy_manager_voc_list',
      'access' => user_access('administer taxonomy'),
      'type' => MENU_NORMAL_ITEM
    );
  }
  
  if (arg(0) == 'admin' && arg(1) == 'content' && arg(2) == 'taxonomy_manager' && is_numeric(arg(3))) {
    $vid = arg(3);
    $items[] = array('path' => 'admin/content/taxonomy_manager/'. $vid,
      'title' => t('Taxonomy Manager'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('taxonomy_manager_form', $vid),
      'access' => user_access('administer taxonomy'), 
      'type' => MENU_CALLBACK 
    );
  }
  return $items;
}

/**
 * list of links of vocabularies (to taxonomy manager interface)
 */
function taxonomy_manager_voc_list() {
  $vocabularies = taxonomy_get_vocabularies();
  $voc_list = array();
  
  foreach ($vocabularies as $vocabulary) {
    $voc_list[] = l($vocabulary->name, 'admin/content/taxonomy_manager/'. $vocabulary->vid);
  }
  
  return theme('item_list', $voc_list);
  
}

/**
 * defines forms for taxonomy manager interface
 */
function taxonomy_manager_form($vid) {
  $module_path = drupal_get_path('module', 'taxonomy_manager'). '/';
  drupal_add_css($module_path. 'css/taxonomy_manager.css');
  drupal_add_js($module_path. 'js/tree.js');
  
  $voc = taxonomy_get_vocabulary($vid);
  
  $form = array();
  
  $form['vid'] = array('#type' => 'value', "#value" => $vid);
  
  $form['taxonomytree'] = array( 
    '#type' => 'fieldset',
    '#title' => $voc->name,
    '#theme' => 'taxonomy_manager_elements',
    '#tree' => TRUE,
    '#prefix' => '<div id="taxonomytree">',
    '#suffix' => '</div>',
  );
  
  $form['taxonomytree'] += taxonomy_manager_build_tree_form(taxonomy_get_tree($vid));
  
  $form['delete'] = array( 
    '#type' => 'submit', 
    '#value' => t('Delete selected'), 
  );
  
  $form['update_weight'] = array( 
    '#type' => 'submit', 
    '#value' => t('Update weight'), 
  );
  
  $form['add'] = array( 
    '#type' => 'fieldset', 
    '#tree' => TRUE,
    '#title' => t('Add new terms'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#prefix' => '<div id="add_terms">',
    '#suffix' => '</div>',
    '#description' => t('Depending on the hierarchy settings, you can set parents (one ore more).
                         Selected terms above will get the parents of the new inserted'), 
  );
  
  for ($i=0; $i<5; $i++) {
    $form['add']['term'][$i] = array( 
      '#type' => 'textfield', 
    );
  }
  $form['add']['add'] = array( 
    '#type' => 'submit', 
    '#value' => t('Add terms'), 
  );
  
  return $form;
}

/**
 * submits the taxonomy manager form
 */
function taxonomy_manager_form_submit($form_id, $form_values) {  
  $tids = array(); 
  $weights = array();
  
  foreach ($form_values['taxonomytree'] as $tid => $forms) {
    if ($forms['checkbox']) {
      $tids[] = $tid;
    }
    if ($forms['weight'] != $forms['weight_old']) {
      $weights[$tid] = $forms['weight'];
    }
  }
  
  switch($form_values['op']) {
    case t('Delete selected'):
      if (count($tids) > 0) {
        taxonomy_manager_delete_terms($tids);
        drupal_set_message("Selected terms deleted"); 
      }
      else {
        drupal_set_message("No terms selected");
      }
      break;
    
    case t('Update weight'):       
      if (count($weights) > 0) {
        taxonomy_manager_update_weight($weights);
        drupal_set_message("Weights updated");
      }
      else {
        drupal_set_message("No weights changed");
      }
      break;
    
    case t('Add terms'): 
      foreach ($form_values['add']['term'] as $value) {
        if (!empty($value)) {
          $term = array();
          $term['name'] = $value;
          $term['vid'] = $form_values['vid'];
          $term['parent'] = $tids;
          taxonomy_save_term($term);
        }
      }
      drupal_set_message("Terms added");
      break;
      
  }
  
  drupal_goto('admin/content/taxonomy_manager/'. $form_values['vid']);
}


/**
 * recursive theme function to create a list of terms
 *
 * @param $element current element (part of form array) in recursion
 * @param $form whole form tree
 */
function theme_taxonomy_manager_elements($element, $form = array()) {
  if (count($form) == 0) $form = $element;
  $output .= "<ul>";
  
  if (is_array($element)) {  
    foreach (element_children($element['terms']) as $tid) {
      if (is_numeric($tid)) {
        $output .= '<li>';
        $output .='<div class="term-line">';
        $output .='<div class="term-checkbox">';
        $output .= drupal_render($form[$tid]['checkbox']);
        $output .= '</div>';
        $output .= '<div class="term-value">';
        $output .= drupal_render($element['terms'][$tid]['term_value']);
        $output .= '</div>';
        $output .= '<div class="term-weight">';
        $output .= drupal_render($form[$tid]['weight']);
        $output .= '</div>';
        $output .= '<div class="clear"> </div></div>';
        
        if (is_array($element['terms'][$tid]['#children'])) {
          $output .= theme('taxonomy_manager_elements', $element['terms'][$tid]['#children'], $form);
        }
        
        $output .='</li>';
      }
    } 
  }
  
  $output .= "</ul>";
  
  return $output;
}

/**
 * builds a form elements (checkbox, weight an term name value) for a taxonomy tree
 *
 * @param $tree Array of terms (generated by taxonomy_get_tree($vid)
 * @return form array
 */
function taxonomy_manager_build_tree_form($tree) {
  $form = array();
  foreach ($tree as $term) {
    $form[$term->tid]['checkbox'] = array('#type' => 'checkbox');
    $form[$term->tid]['weight'] = array('#type' => 'weight', '#default_value' => array($term->weight));
    //store old values in form array, so that only changed weight values (new != old) are updated
    $form[$term->tid]['weight_old'] = array('#type' => 'value', '#value' => $term->weight);
    
  }
  $form += taxonomy_manager_build_tree_form_rec($index = 0, $tree);
  return $form;
}

/**
 * 
 *
 * @param unknown_type $index
 * @param unknown_type $tree
 * @return unknown
 */
function taxonomy_manager_build_tree_form_rec(&$index, $tree) {
  $form = array();
  $current_depth = $tree[$index]->depth;
  while($index < count($tree) && $tree[$index]->depth >= $current_depth) {
    $term = $tree[$index];
    $form['terms'][$term->tid]['term_value'] = array('#value' => $term->name);
    $index++;
    
    if ($tree[$index]->depth > $current_depth) {
      $form['terms'][$term->tid]['#children'] = taxonomy_manager_build_tree_form_rec($index, $tree);
    }
  }
  return $form;
}




function taxonomy_manager_delete_terms($tids) {
  if (!is_array($tids)) array($tids);
  foreach ($tids as $tid) {
    taxonomy_del_term($tid);
  } 
}

function taxonomy_manager_update_weight($weights) {
  foreach ($weights as $tid => $weight) {
    db_query("UPDATE {term_data} SET weight = %d WHERE tid = %d", $weight, $tid);
  }
}


?>